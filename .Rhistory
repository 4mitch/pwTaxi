levels = as.character(0:23)),
target_pickup_dw = list(
type = "factor",
levels = as.character(1:7),
newLevels = c("Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"))
)
#Create the data set
trainDS <- RxSqlServerData(connectionString = sqlConnString,
table = trainTable, rowsPerRead = 5000, colInfo = ccColInfo)
rxHistogram(~target_pickups, data = trainDS)
rxHistogram(~target_pickups|target_pickup_dw, data = trainDS)
rxGetVarInfo(data = trainDS)
rxGetVarInfo(data = testDS)
lm <- rxLinMod(F,data = trainDS)
F <- "target_pickups ~ target_pickup_hour +	target_pickup_dw + pickups_hour_lag_0 + pickups_hour_lag_1 +
pickups_hour_lag_2 +	pickups_hour_lag_3 +	pickups_hour_lag_4 +	pickups_hour_lag_5 +
pickups_hour_lag_6 +	pickups_hour_lag_7 +	pickups_date_lag_1 +	pickups_date_lag_2 +
pickups_date_lag_3 +	pickups_date_lag_4 +	pickups_date_lag_5 +	pickups_date_lag_6 +
pickups_date_lag_7 +"
lm <- rxLinMod(F,data = trainDS)
summary(lm)
#Score the model
scoreDTraintDS <- RxSqlServerData(table = "pickups_score_train",
connectionString = sqlConnString, rowsPerRead = 5000 )
scoreTrainTable <- "pickups_score_train"
scoreDTraintDS <- RxSqlServerData(table = scoreTrainTable,
connectionString = sqlConnString, rowsPerRead = 5000 )
rxSetComputeContext(sqlCompute)
if (rxSqlServerTableExists(scoreTrainTable))
rxSqlServerDropTable(scoreTrainTable)
#Score the trainin data
rxPredict(modelObject = lm,
data = trainDS,
outData = scoreDTraintDS,
predVarNames = "pickupScore",
writeModelVars = FALSE,
extraVarsToWrite = "pickup_datetime",
overwrite = TRUE)
#Drop the destination table if exists
if (rxSqlServerTableExists(scoreTrainTable))
rxSqlServerDropTable(scoreTrainTable)
#Score the trainin data
rxPredict(modelObject = lm,
data = trainDS,
outData = scoreDTraintDS,
predVarNames = "pickupScore",
writeModelVars = FALSE,
extraVarsToWrite = c("pickup_datetime","target_pickups"),
overwrite = TRUE)
#Drop the destination table if exists
if (rxSqlServerTableExists(scoreTrainTable))
rxSqlServerDropTable(scoreTrainTable)
#Score the trainin data
rxPredict(modelObject = lm,
data = trainDS,
outData = scoreDTraintDS,
predVarNames = "pickupScore",
writeModelVars = TRUE,
extraVarsToWrite = c("pickup_datetime"),
overwrite = TRUE)
#Drop the destination table if exists
if (rxSqlServerTableExists(scoreTrainTable))
rxSqlServerDropTable(scoreTrainTable)
#Score the trainin data
rxPredict(modelObject = lm,
data = trainDS,
outData = scoreDTraintDS,
predVarNames = "pickupScore",
writeModelVars = FALSE,
extraVarsToWrite = c("pickup_datetime","target_pickups"),
overwrite = TRUE)
sqlConnString <- "Driver=SQL Server;Server=JrsSql2016e;Database=taxi;Uid=RServicesUser;Pwd=RServicesUser"
trainTable <- "v_pickups_train"
testTable <- "v_pickups_test"
#Column information
ccColInfo <- list(
pickup_datetime = list(
type = "Date"),
target_pickup_hour = list(
type = "factor",
levels = as.character(0:23)),
target_pickup_dw = list(
type = "factor",
levels = as.character(1:7),
newLevels = c("Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"))
)
#Create the data set
trainDS <- RxSqlServerData(connectionString = sqlConnString,
table = trainTable, rowsPerRead = 5000, colInfo = ccColInfo)
testDS <- RxSqlServerData(connectionString = sqlConnString,
table = testTable, rowsPerRead = 5000, colInfo = ccColInfo)
#Get some basic information on the table
rxGetVarInfo(data = trainDS)
#Column information
ccColInfo <- list(
pickup_datetime = list(
type = "character"),
target_pickup_hour = list(
type = "factor",
levels = as.character(0:23)),
target_pickup_dw = list(
type = "factor",
levels = as.character(1:7),
newLevels = c("Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"))
)
#Create the data set
trainDS <- RxSqlServerData(connectionString = sqlConnString,
table = trainTable, rowsPerRead = 5000, colInfo = ccColInfo)
testDS <- RxSqlServerData(connectionString = sqlConnString,
table = testTable, rowsPerRead = 5000, colInfo = ccColInfo)
#Get some basic information on the table
rxGetVarInfo(data = trainDS)
#Create the data set
trainDS <- RxSqlServerData(connectionString = sqlConnString,
table = trainTable, rowsPerRead = 5000, colInfo = ccColInfo)
testDS <- RxSqlServerData(connectionString = sqlConnString,
table = testTable, rowsPerRead = 5000, colInfo = ccColInfo)
#Get some basic information on the table
rxGetVarInfo(data = trainDS)
rxGetVarInfo(data = testDS)
#build model
F <- "target_pickups ~ target_pickup_hour +	target_pickup_dw + pickups_hour_lag_0 + pickups_hour_lag_1 +
pickups_hour_lag_2 +	pickups_hour_lag_3 +	pickups_hour_lag_4 +	pickups_hour_lag_5 +
pickups_hour_lag_6 +	pickups_hour_lag_7 +	pickups_date_lag_1 +	pickups_date_lag_2 +
pickups_date_lag_3 +	pickups_date_lag_4 +	pickups_date_lag_5 +	pickups_date_lag_6 +
pickups_date_lag_7 +"
lm <- rxLinMod(F,data = trainDS)
summary(lm)
#Score the model
scoreTrainTable <- "pickups_score_train"
scoreDTraintDS <- RxSqlServerData(table = scoreTrainTable,
connectionString = sqlConnString, rowsPerRead = 5000 )
#Drop the destination table if exists
if (rxSqlServerTableExists(scoreTrainTable))
rxSqlServerDropTable(scoreTrainTable)
#Score the trainin data
rxPredict(modelObject = lm,
data = trainDS,
outData = scoreDTraintDS,
predVarNames = "pickupScore",
writeModelVars = FALSE,
extraVarsToWrite = c("pickup_datetime","target_pickups"),
overwrite = TRUE)
testTable <- "v_pickups_test"
#Column information
ccColInfo <- list(
pickup_datetime = list(
type = "Date"),
target_pickup_hour = list(
type = "factor",
levels = as.character(0:23)),
target_pickup_dw = list(
type = "factor",
levels = as.character(1:7),
newLevels = c("Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"))
)
#Create the data set
trainDS <- RxSqlServerData(connectionString = sqlConnString,
table = trainTable, rowsPerRead = 5000, colInfo = ccColInfo)
testDS <- RxSqlServerData(connectionString = sqlConnString,
table = testTable, rowsPerRead = 5000, colInfo = ccColInfo)
#Get some basic information on the table
rxGetVarInfo(data = trainDS)
c("2013-01-08 00:00:00.000")
c("2013-01-21 07:00:00.000")
as.Date(c("2013-01-21 07:00:00.000"))
as.Date(c("2013-01-21 07:00:00.000"), format="%Y-%m-%d")
as.Date(c("2013-01-21 07:00:00.000"), format="%Y-%m-%d %h")
#set up variables
sqlConnString <- "Driver=SQL Server;Server=JrsSql2016e;Database=taxi;Uid=RServicesUser;Pwd=RServicesUser"
trainTable <- "v_pickups_train"
testTable <- "v_pickups_test"
#Column information
ccColInfo <- list(
target_pickup_hour = list(
type = "factor",
levels = as.character(0:23)),
target_pickup_dw = list(
type = "factor",
levels = as.character(1:7),
newLevels = c("Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"))
)
#Create the data set
trainDS <- RxSqlServerData(connectionString = sqlConnString,
table = trainTable, rowsPerRead = 5000, colInfo = ccColInfo)
testDS <- RxSqlServerData(connectionString = sqlConnString,
table = testTable, rowsPerRead = 5000, colInfo = ccColInfo)
#Get some basic information on the table
rxGetVarInfo(data = trainDS)
transformIno <- list(
pickup_datetime = as.Date(pickup_datetime, format="%Y-%m-%d")
)
transformIno <- list(
pickup_datetime = as.Date(pickup_datetime, format="%Y-%m-%d"),
overwrite = TRUE
)
sqlConnString <- "Driver=SQL Server;Server=JrsSql2016e;Database=taxi;Uid=RServicesUser;Pwd=RServicesUser"
trainTable <- "v_pickups_train"
testTable <- "v_pickups_test"
#Column information
ccColInfo <- list(
target_pickup_hour = list(
type = "factor",
levels = as.character(0:23)),
target_pickup_dw = list(
type = "factor",
levels = as.character(1:7),
newLevels = c("Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"))
)
#Create the data set
trainDS <- RxSqlServerData(connectionString = sqlConnString,
table = trainTable, rowsPerRead = 5000, colInfo = ccColInfo)
#Create the data set
trainDS <- RxSqlServerData(connectionString = sqlConnString,
table = trainTable, rowsPerRead = 5000, colInfo = ccColInfo)
testDS <- RxSqlServerData(connectionString = sqlConnString,
table = testTable, rowsPerRead = 5000, colInfo = ccColInfo, transform = transformInfo)
#Create the data set
trainDS <- RxSqlServerData(connectionString = sqlConnString,
table = trainTable, rowsPerRead = 5000, colInfo = ccColInfo)
testDS <- RxSqlServerData(connectionString = sqlConnString,
table = testTable, rowsPerRead = 5000, colInfo = ccColInfo)
#Get some basic information on the table
rxGetVarInfo(data = trainDS)
rxGetVarInfo(data = testDS)
#build model
F <- "target_pickups ~ target_pickup_hour +	target_pickup_dw + pickups_hour_lag_0 + pickups_hour_lag_1 +
pickups_hour_lag_2 +	pickups_hour_lag_3 +	pickups_hour_lag_4 +	pickups_hour_lag_5 +
pickups_hour_lag_6 +	pickups_hour_lag_7 +	pickups_date_lag_1 +	pickups_date_lag_2 +
pickups_date_lag_3 +	pickups_date_lag_4 +	pickups_date_lag_5 +	pickups_date_lag_6 +
pickups_date_lag_7 +"
lm <- rxLinMod(F,data = trainDS)
summary(lm)
#Score the model
scoreTrainTable <- "pickups_score_train"
scoreDTraintDS <- RxSqlServerData(table = scoreTrainTable,
connectionString = sqlConnString, rowsPerRead = 5000 )
#Drop the destination table if exists
if (rxSqlServerTableExists(scoreTrainTable))
rxSqlServerDropTable(scoreTrainTable)
#Score the trainin data
rxPredict(modelObject = lm,
data = trainDS,
outData = scoreDTraintDS,
predVarNames = "pickupScore",
writeModelVars = FALSE,
extraVarsToWrite = c("id","target_pickups"),
overwrite = TRUE)
#Score the trainin data
rxPredict(modelObject = lm,
data = trainDS,
outData = scoreDTraintDS,
predVarNames = "forecasted_pickups",
writeModelVars = FALSE,
extraVarsToWrite = c("id","target_pickups"),
overwrite = TRUE)
summary(lm)
#Training data
scoreTrainTable <- "pickups_score_train"
scoreTrainDS <- RxSqlServerData(table = scoreTrainTable,
connectionString = sqlConnString, rowsPerRead = 5000 )
#Drop the destination table if exists
if (rxSqlServerTableExists(scoreTrainTable))
rxSqlServerDropTable(scoreTrainTable)
#Score the trainin data
rxPredict(modelObject = lm,
data = trainDS,
outData = scoreTrainDS,
predVarNames = "forecasted_pickups",
writeModelVars = FALSE,
extraVarsToWrite = c("id","target_pickups"),
overwrite = TRUE)
#Testing data
scoreTestTable <- "pickups_score_test"
scoreTestDS <- RxSqlServerData(table = scoreTestTable,
connectionString = sqlConnString, rowsPerRead = 5000 )
if (rxSqlServerTableExists(scoreTestTable))
rxSqlServerDropTable(scoreTestTable)
#Testing data
scoreTestTable <- "pickups_score_test"
scoreTestDS <- RxSqlServerData(table = scoreTestTable,
connectionString = sqlConnString, rowsPerRead = 5000 )
#Drop the destination table if exists
if (rxSqlServerTableExists(scoreTestTable))
rxSqlServerDropTable(scoreTestTable)
#Score the trainin data
rxPredict(modelObject = lm,
data = testDS,
outData = scoreTestDS,
predVarNames = "forecasted_pickups",
writeModelVars = FALSE,
extraVarsToWrite = c("id","target_pickups"),
overwrite = TRUE)
lm.df <- data.frame(model=as.raw(serialize(lm, connection=NULL)))
serialize(lm, connection=NULL)
View(lm.df)
rf <- rxDForest(formula = F, data=trainDS)
summary(df)
#set up variables
sqlConnString <- "Driver=SQL Server;Server=JrsSql2016e;Database=taxi;Uid=RServicesUser;Pwd=RServicesUser"
trainTable <- "v_pickups_train"
testTable <- "v_pickups_test"
#Column information
ccColInfo <- list(
target_pickup_hour = list(
type = "factor",
levels = as.character(0:23)),
target_pickup_dw = list(
type = "factor",
levels = as.character(1:7),
newLevels = c("Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"))
)
#Create the data set
trainDS <- RxSqlServerData(connectionString = sqlConnString,
table = trainTable, rowsPerRead = 5000, colInfo = ccColInfo)
testDS <- RxSqlServerData(connectionString = sqlConnString,
table = testTable, rowsPerRead = 5000, colInfo = ccColInfo)
#Get some basic information on the table
rxGetVarInfo(data = trainDS)
rxGetVarInfo(data = testDS)
#Need a local cache directory
sqlShareDir <- paste("c:\\AllShare\\", Sys.getenv("USERNAME"), sep="")
dir.create(sqlShareDir, recursive = TRUE)
#Set the compute context
sqlCompute <- RxInSqlServer(connectionString = sqlConnString, shareDir = sqlShareDir,
wait = TRUE,  consoleOutput = TRUE)
# Set the compute context to compute in SQL Server
rxSetComputeContext(sqlCompute)
#rxSetComputeContext(computeContext = 'local')
#Display summary statistics
rxSummary(formula = ~target_pickup_hour + target_pickup_dw + target_pickups, data = trainDS)
#build model
F <- "target_pickups ~ target_pickup_hour +	target_pickup_dw + pickups_hour_lag_0 + pickups_hour_lag_1 +
pickups_hour_lag_2 +	pickups_hour_lag_3 +	pickups_hour_lag_4 +	pickups_hour_lag_5 +
pickups_hour_lag_6 +	pickups_hour_lag_7 +	pickups_date_lag_1 +	pickups_date_lag_2 +
pickups_date_lag_3 +	pickups_date_lag_4 +	pickups_date_lag_5 +	pickups_date_lag_6 +
pickups_date_lag_7 +"
rf <- rxDForest(formula = F, data=trainDS)
rf <- rxDForest(formula = F, data=trainDS, cp = 0.01)
trainDS <- RxSqlServerData(connectionString = sqlConnString,
table = trainTable, rowsPerRead = 5000, colInfo = ccColInfo)
rxGetVarInfo(data = trainDS)
sqlConnString <- "Driver=SQL Server;Server=JrsSql2016e;Database=taxi;Uid=RServicesUser;Pwd=RServicesUser"
trainTable <- "t_pickups_train"
testTable <- "v_pickups_test"
#Column information
ccColInfo <- list(
target_pickup_hour = list(
type = "factor",
levels = as.character(0:23)),
target_pickup_dw = list(
type = "factor",
levels = as.character(1:7),
newLevels = c("Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"))
)
#Create the data set
trainDS <- RxSqlServerData(connectionString = sqlConnString,
table = trainTable, rowsPerRead = 5000, colInfo = ccColInfo)
testDS <- RxSqlServerData(connectionString = sqlConnString,
table = testTable, rowsPerRead = 5000, colInfo = ccColInfo)
#Get some basic information on the table
rxGetVarInfo(data = trainDS)
rxGetVarInfo(data = testDS)
rf <- rxDForest(formula = F, data=trainDS, cp = 0.01)
rf <- rxDForest(formula = F, data=trainDS, cp = 0.01, verbose = 1)
F <- "target_pickups ~ target_pickup_hour +	target_pickup_dw + pickups_hour_lag_0 + pickups_hour_lag_1 +
pickups_hour_lag_2 + pickups_hour_lag_3 +	pickups_hour_lag_4 + pickups_hour_lag_5 +
pickups_hour_lag_6 + pickups_hour_lag_7 + pickups_date_lag_1 + pickups_date_lag_2 +
pickups_date_lag_3 + pickups_date_lag_4 + pickups_date_lag_5 + pickups_date_lag_6 +
pickups_date_lag_7"
rf <- rxDForest(formula = F, data=trainDS, cp = 0.01, verbose = 1
)
summary(df)
scoreTrainTable <- "pickups_score_train"
scoreTrainDS <- RxSqlServerData(table = scoreTrainTable,
connectionString = sqlConnString, rowsPerRead = 5000 )
#Drop the destination table if exists
if (rxSqlServerTableExists(scoreTrainTable))
rxSqlServerDropTable(scoreTrainTable)
#Score the trainin data
rxPredict(modelObject = df,
data = trainDS,
outData = scoreTrainDS,
predVarNames = "forecasted_pickups",
writeModelVars = FALSE,
extraVarsToWrite = c("id","target_pickups"),
overwrite = TRUE)
rf <- rxDForest(formula = F, data=trainDS, verbose = 1)
summary(df)
summary(rf)
scoreTrainDS <- RxSqlServerData(table = scoreTrainTable,
connectionString = sqlConnString, rowsPerRead = 5000 )
#Drop the destination table if exists
if (rxSqlServerTableExists(scoreTrainTable))
rxSqlServerDropTable(scoreTrainTable)
#Score the trainin data
rxPredict(modelObject = rf,
data = trainDS,
outData = scoreTrainDS,
predVarNames = "forecasted_pickups",
writeModelVars = FALSE,
extraVarsToWrite = c("id","target_pickups"),
overwrite = TRUE)
scoreTestTable <- "pickups_score_test"
scoreTestDS <- RxSqlServerData(table = scoreTestTable,
connectionString = sqlConnString, rowsPerRead = 5000 )
#Drop the destination table if exists
if (rxSqlServerTableExists(scoreTestTable))
rxSqlServerDropTable(scoreTestTable)
#Score the trainin data
rxPredict(modelObject = rf,
data = testDS,
outData = scoreTestDS,
predVarNames = "forecasted_pickups",
writeModelVars = FALSE,
extraVarsToWrite = c("id","target_pickups"),
overwrite = TRUE)
bd <- rxBTrees(formula = F, data=trainDS)
#Score the model
#Training data
scoreTrainTable <- "pickups_score_train"
scoreTrainDS <- RxSqlServerData(table = scoreTrainTable,
connectionString = sqlConnString, rowsPerRead = 5000 )
#Drop the destination table if exists
if (rxSqlServerTableExists(scoreTrainTable))
rxSqlServerDropTable(scoreTrainTable)
#Score the trainin data
rxPredict(modelObject = bd,
data = trainDS,
outData = scoreTrainDS,
predVarNames = "forecasted_pickups",
writeModelVars = FALSE,
extraVarsToWrite = c("id","target_pickups"),
overwrite = TRUE)
#Testing data
scoreTestTable <- "pickups_score_test"
scoreTestDS <- RxSqlServerData(table = scoreTestTable,
connectionString = sqlConnString, rowsPerRead = 5000 )
#Drop the destination table if exists
if (rxSqlServerTableExists(scoreTestTable))
rxSqlServerDropTable(scoreTestTable)
#Score the trainin data
rxPredict(modelObject = bd,
data = testDS,
outData = scoreTestDS,
predVarNames = "forecasted_pickups",
writeModelVars = FALSE,
extraVarsToWrite = c("id","target_pickups"),
overwrite = TRUE)
scoreTrainTable <- "pickups_score_train"
scoreTrainDS <- RxSqlServerData(table = scoreTrainTable,
connectionString = sqlConnString, rowsPerRead = 5000 )
#Drop the destination table if exists
if (rxSqlServerTableExists(scoreTrainTable))
rxSqlServerDropTable(scoreTrainTable)
#Score the trainin data
rxPredict(modelObject = bd,
data = trainDS,
outData = scoreTrainDS,
predVarNames = "forecasted_pickups",
writeModelVars = FALSE,
extraVarsToWrite = c("id","target_pickups"),
overwrite = TRUE)
#Testing data
scoreTestTable <- "pickups_score_test"
scoreTestDS <- RxSqlServerData(table = scoreTestTable,
connectionString = sqlConnString, rowsPerRead = 5000 )
#Drop the destination table if exists
if (rxSqlServerTableExists(scoreTestTable))
rxSqlServerDropTable(scoreTestTable)
rxPredict(modelObject = bd,
data = testDS,
outData = scoreTestDS,
predVarNames = "forecasted_pickups",
writeModelVars = FALSE,
extraVarsToWrite = c("id","target_pickups"),
overwrite = TRUE)
bd <- rxBTrees(formula = F, data=trainDS,
maxDepth = 6, minSplit = 2, nTree = 50,
lossFunction = "gaussian", learningRate = 0.1)
plot(bd)
scoreTrainTable <- "pickups_score_train"
scoreTrainDS <- RxSqlServerData(table = scoreTrainTable,
connectionString = sqlConnString, rowsPerRead = 5000 )
#Drop the destination table if exists
if (rxSqlServerTableExists(scoreTrainTable))
rxSqlServerDropTable(scoreTrainTable)
#Score the trainin data
rxPredict(modelObject = bd,
data = trainDS,
outData = scoreTrainDS,
predVarNames = "forecasted_pickups",
writeModelVars = FALSE,
extraVarsToWrite = c("id","target_pickups"),
overwrite = TRUE)
#Testing data
scoreTestTable <- "pickups_score_test"
scoreTestDS <- RxSqlServerData(table = scoreTestTable,
connectionString = sqlConnString, rowsPerRead = 5000 )
#Drop the destination table if exists
if (rxSqlServerTableExists(scoreTestTable))
rxSqlServerDropTable(scoreTestTable)
#Score the trainin data
rxPredict(modelObject = bd,
data = testDS,
outData = scoreTestDS,
predVarNames = "forecasted_pickups",
writeModelVars = FALSE,
extraVarsToWrite = c("id","target_pickups"),
overwrite = TRUE)
bd.df <- data.frame(model=as.raw(serialize(bd, connection=NULL)))
View(bd.df)
