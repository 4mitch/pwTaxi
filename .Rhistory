maxDepth = 6, minSplit = 2, nTree = 50,
lossFunction = "gaussian", learningRate = 0.1)
summary(bd)
plot(bd)
dbSaveRDS(connectionString = sqlConnString, object = bd, key = "bd.1")
dbSaveRDS(connectionString = sqlConnString, object = bd, key = "bd.1")
dbSaveRDS(connectionString = sqlConnString, object = bd, key = "bd.1")
tempfile()
dbSaveRaw(connectionString = sqlConnString, object = bd, key = "bd.1")
#Serialze model
dbSaveRDS(connectionString = sqlConnString, object = bd, key = "bd.1")
x <- 1;100
dbSaveRDS(connectionString = sqlConnString, object = x, key = "bd.1")
saveRDS(object = x,"jrs123")
saveRDS(object = bd,"jrs123")
rawCon <- tempfile()object = x, key = "bd.1")
rawCon <- tempfile()
rawCon
saveRDS(object = bd, file = rawCon)
saveRDS(object = bd, file = rawCon, compress = F)
dbSaveRDS(connectionString = sqlConnString, object = bd, key = "bd.1")
dbSaveRDS(connectionString = sqlConnString, object = bd, key = "bd.1")
dbSaveRDS(connectionString = sqlConnString, object = bd, key = "bd.1")
source("serialization.R")
dbSaveRDS(connectionString = sqlConnString, object = bd, key = "bd.1")
dbSaveRDS(connectionString = sqlConnString, object = bd, key = "bd.1")
dbSaveRDS(connectionString = sqlConnString, object = bd, key = "bd.1")
rxPredict(modelObject = bd,
data = testDS,
#outData = scoreTestDS,
predVarNames = "forecasted_pickups",
writeModelVars = FALSE,
extraVarsToWrite = c("id","target_pickups"),
#overwrite = TRUE
)
rxPredict(modelObject = bd,
data = testDS,
outData = NULL,
predVarNames = "forecasted_pickups",
writeModelVars = FALSE,
extraVarsToWrite = c("id","target_pickups"),
overwrite = TRUE
)
rxPredict(modelObject = bd,
data = testDS,
outData = scoreTestDS,
predVarNames = "forecasted_pickups",
writeModelVars = FALSE,
extraVarsToWrite = c("id","target_pickups"),
overwrite = TRUE
)
if (rxSqlServerTableExists(scoreTestTable))
rxSqlServerDropTable(scoreTestTable)
#Score the trainin data
rxPredict(modelObject = bd,
data = testDS,
outData = scoreTestDS,
predVarNames = "forecasted_pickups",
writeModelVars = FALSE,
extraVarsToWrite = c("id","target_pickups"),
overwrite = TRUE
)
source("serialization.R")
#set up variables
sqlConnString <- "Driver=SQL Server;Server=JrsSql2016e;Database=taxi;Uid=RServicesUser;Pwd=RServicesUser"
trainTable <- "t_pickups_train"
testTable <- "v_pickups_test"
#Column information
ccColInfo <- list(
target_pickup_hour = list(
type = "factor",
levels = as.character(0:23)),
target_pickup_dw = list(
type = "factor",
levels = as.character(1:7),
newLevels = c("Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"))
)
#Create the data set
trainDS <- RxSqlServerData(connectionString = sqlConnString,
table = trainTable, rowsPerRead = 5000, colInfo = ccColInfo)
testDS <- RxSqlServerData(connectionString = sqlConnString,
table = testTable, rowsPerRead = 5000, colInfo = ccColInfo)
#Drop the destination table if exists
if (rxSqlServerTableExists(scoreTestTable))
rxSqlServerDropTable(scoreTestTable)
#Score the trainin data
rxPredict(modelObject = bd,
data = testDS,
outData = scoreTestDS,
predVarNames = "forecasted_pickups",
writeModelVars = FALSE,
extraVarsToWrite = c("id","target_pickups"),
overwrite = TRUE
)
scoreTestTable <- "pickups_score_test"
scoreTestDS <- RxSqlServerData(table = scoreTestTable,
connectionString = sqlConnString, rowsPerRead = 5000 )
#Drop the destination table if exists
if (rxSqlServerTableExists(scoreTestTable))
rxSqlServerDropTable(scoreTestTable)
#Score the trainin data
rxPredict(modelObject = bd,
data = testDS,
outData = scoreTestDS,
predVarNames = "forecasted_pickups",
writeModelVars = FALSE,
extraVarsToWrite = c("id","target_pickups"),
overwrite = TRUE
)
rxPredict(modelObject = bd,
data = testDS,
outData = NULL,
predVarNames = "forecasted_pickups",
writeModelVars = FALSE,
extraVarsToWrite = c("id","target_pickups"),
overwrite = TRUE
)
xx <-
rxPredict(modelObject = bd,
data = testDS,
outData = NULL,
predVarNames = "forecasted_pickups",
writeModelVars = FALSE,
extraVarsToWrite = c("id","target_pickups"),
overwrite = TRUE
)
xx <- rxPredict(modelObject = bd,
data = testDS,
outData = NULL,
predVarNames = "forecasted_pickups",
writeModelVars = FALSE,
extraVarsToWrite = c("id","target_pickups"),
overwrite = TRUE)
xx <- rxPredict(modelObject = bd,
data = testDS,
outData = scoreTestDS,
predVarNames = "forecasted_pickups",
writeModelVars = FALSE,
extraVarsToWrite = c("id","target_pickups"),
overwrite = TRUE)
data.frame(xx)
xx <- rxPredict(modelObject = bd,
data = testDS,
outData = NULL,
predVarNames = "forecasted_pickups",
writeModelVars = FALSE,
extraVarsToWrite = c("id","target_pickups"),
overwrite = TRUE)
rxSetComputeContext(computeContext = 'local')
xx <- rxPredict(modelObject = bd,
data = testDS,
outData = NULL,
predVarNames = "forecasted_pickups",
writeModelVars = FALSE,
extraVarsToWrite = c("id","target_pickups"),
overwrite = TRUE)
y <- rxImport(data = testDS,colInfo = ccColInfo)
y <- rxImport(indata = testDS,
colInfo = ccColInfo)
y <- rxImport(inData = testDS, colInfo = ccColInfo)
View(y)
y <- rxImport(inData = testDS)
View(y)
y <- rxImport(inData = y, colInfo = ccColInfo)
testDS <- RxSqlServerData(connectionString = sqlConnString,
table = testTable, rowsPerRead = 5000)#, colInfo = ccColInfo)
y <- rxImport(inData = testDS)
View(y)
y <- rxImport(inData = y, colInfo = ccColInfo)
View(y)
testDS <- RxSqlServerData(connectionString = sqlConnString,
table = testTable, rowsPerRead = 5000, colInfo = ccColInfo)
xx <- rxPredict(modelObject = bd,
data = y,
outData = NULL,
predVarNames = "forecasted_pickups",
writeModelVars = FALSE,
extraVarsToWrite = c("id","target_pickups"),
overwrite = TRUE)
data.frame(xx)
m <- data.frame(value=as.raw(serialize(bd, connection=NULL)))
View(m)
#set up variables
sqlConnString <- "Driver=SQL Server;Server=JrsSql2016e;Database=taxi;Uid=RServicesUser;Pwd=RServicesUser"
trainTable <- "v_pickups_train"
testTable <- "v_pickups_test"
#Column information
ccColInfo <- list(
target_pickup_hour = list(
type = "factor",
levels = as.character(0:23)),
target_pickup_dw = list(
type = "factor",
levels = as.character(1:7),
newLevels = c("Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"))
)
#Create the data set
trainDS <- RxSqlServerData(connectionString = sqlConnString,
table = trainTable, rowsPerRead = 5000, colInfo = ccColInfo)
testDS <- RxSqlServerData(connectionString = sqlConnString,
table = testTable, rowsPerRead = 5000, colInfo = ccColInfo)
#Get some basic information on the table
rxGetVarInfo(data = trainDS)
rxGetVarInfo(data = testDS)
#Need a local cache directory
sqlShareDir <- paste("c:\\AllShare\\", Sys.getenv("USERNAME"), sep="")
dir.create(sqlShareDir, recursive = TRUE)
#Set the compute context
sqlCompute <- RxInSqlServer(connectionString = sqlConnString, shareDir = sqlShareDir,
wait = TRUE,  consoleOutput = TRUE)
# Set the compute context to compute in SQL Server
rxSetComputeContext(sqlCompute)
#rxSetComputeContext(computeContext = 'local')
#Display summary statistics
rxSummary(formula = ~target_pickup_hour + target_pickup_dw + target_pickups, data = trainDS)
#Perform some visualizations
rxHistogram(~target_pickups, data = trainDS)
rxHistogram(~target_pickups|target_pickup_dw, data = trainDS)
#build model
F <- "target_pickups ~ target_pickup_hour +	target_pickup_dw + pickups_hour_lag_0 + pickups_hour_lag_1 +
pickups_hour_lag_2 +	pickups_hour_lag_3 +	pickups_hour_lag_4 +	pickups_hour_lag_5 +
pickups_hour_lag_6 +	pickups_hour_lag_7 +	pickups_date_lag_1 +	pickups_date_lag_2 +
pickups_date_lag_3 +	pickups_date_lag_4 +	pickups_date_lag_5 +	pickups_date_lag_6 +
pickups_date_lag_7 +"
lm <- rxLinMod(F,data = trainDS)
summary(lm)
m <- data.frame(value=as.raw(serialize(lm, connection=NULL)))
m <- data.frame(value=as.raw(serialize(bd, connection=NULL)))
View(m)
m <- data.frame(value=serialize(bd, connection=NULL))
View(m)
m <- saveRDS(object = bd)
lapply(bd, function(x) {serialize(x,NULL)})
lapply(lapply(bd, function(x) {serialize(x,NULL)}), function(y) {serialize(y, NULL)}
)
lapply(lapply(bd, function(x) {serialize(x,NULL)}), function(y) {serialize(y, NULL)})
l < - lapply(bd, function(x) {serialize(x,NULL)})
l <- lapply(bd, function(x) {serialize(x,NULL)})
l
y <- rxImport(inData = testDS)
y <- rxImport(inData = y, colInfo = ccColInfo)
xx <- rxPredict(modelObject = bd,
data = y,
outData = NULL,
predVarNames = "forecasted_pickups",
writeModelVars = FALSE,
extraVarsToWrite = c("id","target_pickups"),
overwrite = TRUE)
rxSetComputeContext(sqlCompute)
xx <- rxPredict(modelObject = bd,
data = y,
outData = NULL,
predVarNames = "forecasted_pickups",
writeModelVars = FALSE,
extraVarsToWrite = c("id","target_pickups"),
overwrite = TRUE)
rxSetComputeContext(computeContext = 'local')
y <- rxImport(inData = testDS)
y <- rxImport(inData = y, colInfo = ccColInfo)
View(y)
xx <- rxPredict(modelObject = bd,
data = y,
outData = NULL,
predVarNames = "forecasted_pickups",
writeModelVars = FALSE,
extraVarsToWrite = c("id","target_pickups"),
overwrite = TRUE)
View(xx)
l <- lapply(bd, function(x) {serialize(x,NULL)})
l <- data.frame(lapply(bd, function(x) {serialize(x,NULL)}))
l <- data.frame(lapply(bd, function(x) {serialize(x,NULL)}))
lapply(bd, function(x) {serialize(x,NULL)})
l <- data.frame(I(lapply(bd, function(x) {serialize(x,NULL)})))
View(l)
l <- lapply(bd, function(x) {serialize(x,NULL)})
serialize(l, NULL)
d <- data.frame(serialize(l, NULL))
serialize(l, NULL)
l <- serialize(lapply(bd, function(x) {serialize(x,NULL)}))
l <- serialize(lapply(bd, function(x) {serialize(x,NULL)}), NULL)
data.frame(l)
data.frame(I(l))
d<- data.frame(I(l))
l <- as.data.frame(lapply(bd, function(x) {serialize(x,NULL)}))
l <- as.data.frame(value=I(lapply(bd, function(x) {serialize(x,NULL)})))
l <- data.frame(value=I(lapply(bd, function(x) {serialize(x,NULL)})))
View(l)
bd.2 <- lapply(l, 'unserialize')
bd.2 <- lapply(l, function(x) {unserialize(x)})
bd.2 <- unserialize(l)
x <- serialize(list(1,2,3), NULL)
unserialize(x)
bd.2 <- lapply(l$forest, function(x) {unserialize(x)})
bd.2
m <- data.frame(value=as.raw(serialize(bd, connection=NULL)))
mm <- serialize(m, NULL)
mm <- I(serialize(m, NULL))
mm <- data.frame(I(serialize(m, NULL)))
View(mm)
m <- serialize(bd, connection=NULL)
bd.2 <- unserialize(m)
bd.2 <- NULL
m <- serialize(bd, connection=NULL)
bd.2 <-  unserialize(m)
xx <- rxPredict(modelObject = bd.2,
data = y,
outData = NULL,
predVarNames = "forecasted_pickups",
writeModelVars = FALSE,
extraVarsToWrite = c("id","target_pickups"),
overwrite = TRUE)
View(xx)
m <- as.raw(serialize(bd, casonnection=NULL))
bd.2 <-  unserialize(m)
m <- as.raw(serialize(bd, casonnection=NULL))
bd.2 <-  as.raw(unserialize(m))
bd.2 <-  unserialize(as.raw(m))
xx <- rxPredict(modelObject = bd.2,
data = y,
outData = NULL,
predVarNames = "forecasted_pickups",
writeModelVars = FALSE,
extraVarsToWrite = c("id","target_pickups"),
overwrite = TRUE)
m <- data.frame(model = as.raw(serialize(bd, casonnection=NULL)))
m <- data.frame(model=as.raw(serialize(bd, casonnection=NULL)))
m <- as.raw(serialize(bd, NULL))
bd.2 <-  unserialize(as.raw(m))
m <- data.frame(model=as.raw(serialize(bd, NULL)))
bd.2 <-NULL
bd.2 <- unserialize(as.raw(m$model))
xx <- rxPredict(modelObject = bd.2,
data = y,
outData = NULL,
predVarNames = "forecasted_pickups",
writeModelVars = FALSE,
extraVarsToWrite = c("id","target_pickups"),
overwrite = TRUE)
modelTable <- "bd_model"
scoreTrainDS <- RxSqlServerData(table = modelTable,
connectionString = sqlConnString, rowsPerRead = 5000 )
#Drop the destination table if exists
if (rxSqlServerTableExists(modelTable))
rxSqlServerDropTable(modelTable)
rxSetComputeContext(sqlCompute)
modelTable <- "bd_model"
scoreTrainDS <- RxSqlServerData(table = modelTable,
connectionString = sqlConnString, rowsPerRead = 5000 )
if (rxSqlServerTableExists(modelTable))
rxSqlServerDropTable(modelTable)
modelDS <- RxSqlServerData(table = modelTable,
connectionString = sqlConnString, rowsPerRead = 5000 )
scoreTestDS <- RxSqlServerData(table = scoreTestTable,
connectionString = sqlConnString, rowsPerRead = 5000 )
modelDS <- RxSqlServerData(table = modelTable,
connectionString = sqlConnString, rowsPerRead = 5000 )
rxDataStep(inData = m, outFile = modelDS)
rxDataStep(inData = m, outFile = modelDS, overwrite = TRUE)
rxSetComputeContext(computeContext = 'local')
rxDataStep(inData = m, outFile = modelDS, overwrite = TRUE)
#serialize model and convert to dataframe
m <- data.frame(g = I(lapply(bd, function(x) { serialize(x, NULL)})))
#Drop the destination table if exists
if (rxSqlServerTableExists(modelTable))
rxSqlServerDropTable(modelTable)
rxSetComputeContext(computeContext = 'local')
rxDataStep(inData = m, outFile = modelDS, overwrite = TRUE)
#Drop the destination table if exists
if (rxSqlServerTableExists(modelTable))
rxSqlServerDropTable(modelTable)
rxSetComputeContext(sqlCompute)
if (rxSqlServerTableExists(modelTable))
rxSqlServerDropTable(modelTable)
rxSetComputeContext(computeContext = 'local')
rxDataStep(inData = m, outFile = modelDS, overwrite = TRUE)
rxSetComputeContext(computeContext = 'local')
rxDataStep(inData = m, outFile = modelDS, overwrite = TRUE)
m <- data.frame(model = I(lapply(bd, function(x) { serialize(x, NULL)})))
modelTable <- "bd_model"
modelDS <- RxSqlServerData(table = modelTable,
connectionString = sqlConnString, rowsPerRead = 5000 )
rxSetComputeContext(sqlCompute)
if (rxSqlServerTableExists(modelTable))
rxSqlServerDropTable(modelTable)
rxSetComputeContext(computeContext = 'local')
View(m)
m <- data.frame(model = I(lapply(bd, function(x) { as.raw(serialize(x, NULL))})))
View(m)
rxDataStep(inData = m, outFile = modelDS, overwrite = TRUE)
m <- data.frame(id = "xx1", model = I(lapply(bd, function(x) { as.raw(serialize(x, NULL))})))
View(m)
m2 <- as.dataframe(id= "bd.1", model=as.raw(serialize(bd,NULL)))
m2 <- data.frame(id= "bd.1", model=as.raw(serialize(bd,NULL)))
View(m2)
#serialize model and convert to dataframe
m2 <- model=as.raw(serialize(bd,NULL))
m2 <- model=as.raw(serialize(bd,NULL))
m2 <- as.raw(serialize(bd,NULL))
bd.3 <- bd.2$forest
xx <- rxPredict(modelObject = bd.3,
data = y,
outData = NULL,
predVarNames = "forecasted_pickups",
writeModelVars = FALSE,
extraVarsToWrite = c("id","target_pickups"),
overwrite = TRUE)
m2 <- as.raw(serialize(bd,NULL))
m2 <- rawToChar(serialize(bd,NULL))
m2 <- rawToChar(as.raw(serialize(bd,NULL)))
m2 <- rawToChar(as.raw(serialize(bd,NULL, TRUE)))
db.3 <- unserialize(charToRaw(m2))
bd.4 <- unserialize(charToRaw(m2))
xx <- rxPredict(modelObject = bd.4,
data = y,
outData = NULL,
predVarNames = "forecasted_pickups",
writeModelVars = FALSE,
extraVarsToWrite = c("id","target_pickups"),
overwrite = TRUE)
m2 <- data.frame(id="bd.1", model=rawToChar(as.raw(serialize(bd,NULL, TRUE))))
m2 <- data.frame(id="bd.1", model=rawToBits(as.raw(serialize(bd,NULL, TRUE))))
m2 <- data.frame(id="bd.1", model=rawToChar(as.raw(serialize(bd,NULL, TRUE))))
modelTable <- "bd_model"
modelDS <- RxSqlServerData(table = modelTable,
connectionString = sqlConnString, rowsPerRead = 5000 )
rxSetComputeContext(sqlCompute)
if (rxSqlServerTableExists(modelTable))
rxSqlServerDropTable(modelTable)
m <- data.frame(id="bd.1", model=rawToChar(as.raw(serialize(bd,NULL, TRUE))))
rxDataStep(inData = m, outFile = modelDS, overwrite = TRUE)
rxSetComputeContext(computeContext = 'local')
rxDataStep(inData = m, outFile = modelDS, overwrite = TRUE)
modelTable <- "models"
modelDS <- RxSqlServerData(table = modelTable,
connectionString = sqlConnString, rowsPerRead = 5000 )
rxSetComputeContext(computeContext = 'local')
rxDataStep(inData = m, outFile = modelDS, append = TRUE)
rxDataStep(inData = m, outFile = modelDS, append = TRUE, overwrite = FALSE)
rxDataStep(inData = m, outFile = modelDS, append = "rows")
m <- data.frame(id="bd.1", model=rawToChar(as.raw(serialize(lm,NULL, TRUE))))
rxDataStep(inData = m, outFile = modelDS, append = "rows")
m <- rawToChar(as.raw(serialize(lm,NULL, TRUE)))
m <- lapply(bd, function(x) {serialize(x, NULL)})
m <- lapply(m, function(x) {unserialize(x)})
m <- lapply(bd, function(x) {serialize(x, NULL)})
m <- unserialize(m)
lapply(m, function(x) {unserialize(x)})
m <- lapply(m, function(x) {unserialize(x)})
xx <- rxPredict(modelObject = m,
data = y,
outData = NULL,
predVarNames = "forecasted_pickups",
writeModelVars = FALSE,
extraVarsToWrite = c("id","target_pickups"),
overwrite = TRUE)
dbSaveRDS(connectionString = sqlConnString, object = bd, key = "bd.1")
#Testing data
scoreTestTable <- "pickups_score_test"
scoreTestDS <- RxSqlServerData(table = scoreTestTable,
connectionString = sqlConnString, rowsPerRead = 5000 )
#Drop the destination table if exists
if (rxSqlServerTableExists(scoreTestTable))
rxSqlServerDropTable(scoreTestTable)
#Score the trainin data
rxPredict(modelObject = bd,
data = testDS,
outData = scoreTestDS,
predVarNames = "forecasted_pickups",
writeModelVars = FALSE,
extraVarsToWrite = c("id","target_pickups"),
overwrite = TRUE
)
#set up variables
sqlConnString <- "Driver=SQL Server;Server=JrsSql2016e;Database=taxi;Uid=RServicesUser;Pwd=RServicesUser"
trainTable <- "t_pickups_train"
testTable <- "v_pickups_test"
#Column information
ccColInfo <- list(
target_pickup_hour = list(
type = "factor",
levels = as.character(0:23)),
target_pickup_dw = list(
type = "factor",
levels = as.character(1:7),
newLevels = c("Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"))
)
#Create the data set
trainDS <- RxSqlServerData(connectionString = sqlConnString,
table = trainTable, rowsPerRead = 5000, colInfo = ccColInfo)
testDS <- RxSqlServerData(connectionString = sqlConnString,
table = testTable, rowsPerRead = 5000, colInfo = ccColInfo)
rxGetVarInfo(data = trainDS)
rxGetVarInfo(data = testDS)
sqlShareDir <- paste("c:\\AllShare\\", Sys.getenv("USERNAME"), sep="")
dir.create(sqlShareDir, recursive = TRUE)
sqlCompute <- RxInSqlServer(connectionString = sqlConnString, shareDir = sqlShareDir,
wait = TRUE,  consoleOutput = TRUE)
rxSetComputeContext(sqlCompute)
rxSummary(formula = ~target_pickup_hour + target_pickup_dw + target_pickups, data = trainDS)
rxHistogram(~target_pickups, data = trainDS)
rxHistogram(~target_pickups|target_pickup_dw, data = trainDS)
#build model
F <- "target_pickups ~ target_pickup_hour +	target_pickup_dw + pickups_hour_lag_0 + pickups_hour_lag_1 +
pickups_hour_lag_2 + pickups_hour_lag_3 +	pickups_hour_lag_4 + pickups_hour_lag_5 +
pickups_hour_lag_6 + pickups_hour_lag_7 + pickups_date_lag_1 + pickups_date_lag_2 +
pickups_date_lag_3 + pickups_date_lag_4 + pickups_date_lag_5 + pickups_date_lag_6 +
pickups_date_lag_7"
bd <- rxBTrees(formula = F, data=trainDS,
maxDepth = 6, minSplit = 2, nTree = 50,
lossFunction = "gaussian", learningRate = 0.1)
summary(bd)
plot(bd)
